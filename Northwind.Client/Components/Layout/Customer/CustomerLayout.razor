@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Northwind.Client.Sessions
@inherits LayoutComponentBase

@inject IDialogService DialogService

@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager
@inject CustomerSessions CustomerSessions

<FluentDesignTheme Mode="DesignThemeModes.System" StorageName="theme" />
<FluentDialogProvider />
<FluentToastProvider MaxToastCount="10" Position="ToastPosition.BottomRight" />

<FluentLayout>
	<FluentHeader>
		Northwind
		<FluentSpacer />
		<FluentIcon Id="Settings" Value="@(new Icons.Regular.Size20.Settings())" Color="Color.Lightweight"
			OnClick="@ShowSettingAsync"/>
		<FluentTooltip Anchor="Settings" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Bottom Delay=600>Settings</FluentTooltip>	
		<FluentProfileMenu Image="favicon.ico" Status="@PresenceStatus.Available" HeaderLabel="Northwind" Initials="NW"
			FullName="@ContactName" PopoverStyle="min-width: 330px;" FooterLink=""
			OnHeaderButtonClick="Logout" />
	</FluentHeader>
	<FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
		<CustomerNavMenu />
		<FluentBodyContent Class="body-content">
			<div class="content">
				@Body
			</div>
		</FluentBodyContent>
	</FluentStack>
</FluentLayout>

<div id="blazor-error-ui" data-nosnippet>
	An unhandled error has occurred.
	<a href="." class="reload">Reload</a>
	<span class="dismiss">🗙</span>
</div>

@code {
	private async Task ShowSettingAsync()
	{
		await DialogService.ShowPanelAsync<Layout.Settings>(new DialogParameters()
		{
			Title = "Settings",
			Alignment = HorizontalAlignment.Right,
			SecondaryAction = null,
		});
	}

	public string? CompanyName { get; set; }
	public string? ContactName { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var resultCompanyName = await ProtectedSessionStorage.GetAsync<string>("CompanyName");
			CompanyName = resultCompanyName.Success ? resultCompanyName.Value : "Unknown";

			var resultContactName = await ProtectedSessionStorage.GetAsync<string>("ContactName");
			ContactName = resultContactName.Success ? resultContactName.Value : "Unknown";
			StateHasChanged(); // Trigger UI re-render
		}
	}

	private async void Logout()
	{
		await CustomerSessions.RemoveSessions();
		// Logout user
		NavigationManager.NavigateTo("/customer/customer-login");
	}

}
